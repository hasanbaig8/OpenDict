name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release:
          - Add changelog items here
        draft: false
        prerelease: false

  build-macos:
    runs-on: macos-latest
    needs: create-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Swift application
      run: |
        swift build -c release

    - name: Create app bundle
      run: |
        mkdir -p OpenDict.app/Contents/MacOS
        mkdir -p OpenDict.app/Contents/Resources

        # Copy executable
        cp .build/release/OpenDict OpenDict.app/Contents/MacOS/

        # Copy Python files
        cp transcribe_server.py OpenDict.app/Contents/Resources/
        cp transcribe.py OpenDict.app/Contents/Resources/
        cp config.py OpenDict.app/Contents/Resources/

        # Copy configuration
        cp -r config OpenDict.app/Contents/Resources/

        # Copy virtual environment
        cp -r venv OpenDict.app/Contents/Resources/

        # Copy Info.plist
        cp HelloWorldApp/Info.plist OpenDict.app/Contents/

        # Copy icon
        cp OpenDict.icns OpenDict.app/Contents/Resources/

    - name: Create DMG
      run: |
        # Create a temporary directory for DMG contents
        mkdir dmg_contents
        cp -r OpenDict.app dmg_contents/

        # Create DMG
        hdiutil create -volname "OpenDict" -srcfolder dmg_contents -ov -format UDZO OpenDict.dmg

    - name: Upload DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./OpenDict.dmg
        asset_name: OpenDict.dmg
        asset_content_type: application/octet-stream

    - name: Upload app bundle
      run: |
        tar -czf OpenDict.app.tar.gz OpenDict.app

    - name: Upload app bundle artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./OpenDict.app.tar.gz
        asset_name: OpenDict.app.tar.gz
        asset_content_type: application/gzip

  publish-python-package:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build Python package
      run: |
        python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
